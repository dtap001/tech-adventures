[ { "title": "Certificates in and outs", "url": "/techie-tales/posts/certs-in-and-outs/", "categories": "security, webdev", "tags": "", "date": "2024-11-01 10:32:20 +0100", "snippet": "This is my humble summary regarding every important aspect of the certificates that a developer likely will encounter.What is a certificate? A certificate or digital certificate is a unique, digit...", "content": "This is my humble summary regarding every important aspect of the certificates that a developer likely will encounter.What is a certificate? A certificate or digital certificate is a unique, digitally signed document which authoritatively identifies the identity of an individual or organization. Using public key cryptography, its authenticity can be verified to ensure that the software or website you are using is legitimate. On the Internet, a certificate is signed by a trusted CA (certificate authority), and verified with the authority‚Äôs public key. The decrypted certificate contains a verified public key of the certificate holder (website operator), with which encrypted HTTPS communications can be established.Public-key cryptography or Asymmetric cryptographyPublic Key Pair Generation RSA -&gt; using big prime numbers and based on factoring trap door function, using big keys to provide security ECC (Elliptic curve) -&gt; based on mathematical properties of elliptic curves from which next point can be calculated easily (public key), but reversing it almost impossible -&gt; using shorter keys due to it DSA -&gt; using discrete logaritmic propertyes and private key generated from the content that we want to sign -&gt; used for ensuring file integrity and verificationCommunication FlowIn very oversimplified manner this happens const privateKey = randomString(); const publicKey = generatePublicKey(privateKey); const plainMessage = 'Hello Mr Bug!üêú'; const encryptedMessage = encrypt(publicKey, plainMessage); const decryptedMessage = decrypt(encryptedMessage, privateKey); console.log(decryptedMessage); //'Hello Mr Bug!üêú'Public-Key Infrastructure (PKI) How the heck validate the cert? üòµCertificate Authorities (Verification Authority) A company that is considered trustworthy and produces digital certificates for other individuals andcompanies (i.e. subjects) bearing that subject‚Äôs public keyTasks issues digital certificates; helps establish trust between communicating entities over the internet; verifies domain names and organizations to validate their identities; and maintains certificate revocation lists.‚õîChain of thrust Hierarchy of certificates is used to verify the validity of a certificate‚Äôs issuer. This hierarchy is known as a chain of trust. In a chain of trust, certificates are issued and signed by certificates that live higher up in the hierarchy.Contains three main partsTrust Anchor A public cert key named as CA cert which is trusted by both of the communicating partiesIntermediete Cert you cannot issue new cert from thrusted public CA certs since you need a new layer extra security to provide validation for the CA cert cheaper then issueing new CA cert for every needEnd Entity Cert / Leaf Cert no other cert can be above it represents the end entity of the chainWhat is CSR (Certificate Signing Request)? It is a request which sent to the CA to issue a new certificate with the given propertiesWhat happens? public key pair is generated requested cert field are asked from the user CSR generated and contains: public key data fields are included with the input from the user ExampleDecoder https://ssltools.godaddy.com/views/csrDecoderX.509 Ok but how does everyone understands the certs? X.509 for the win! üèÜ This standard make possible to that information within a digital certificate are all placed in the same location and in the same order, which makes it possible for all kinds of certificates to be shared across organizationsParts üéÅData SectionSignature Section The cipher algorithm ‚Äì the algorithm used by the issuer to create a digital signature The digital signature for the CA ‚Äì a hash of all the information in the certificate encrypted with the CA private keyCertificate formats ‚òòÔ∏èBinary.DER (Distinguished Encoding Rules) A single binary certificate, platform-independent format, the default format for most browsers Use: Used for Certificate Requests, which are always DER-encoded and then base64-encodedPKCS#12 (Public-Key Cryptographic Standards) One or more certificates packed together, password-encrypted Use: When the CA wants to ship a package confidentially that contains the private keyBase64 (ASCII).PEM Default format for OpenSSL. Suitable for sending files as text between systems Prefixed with a ‚Äú‚ÄìBEGIN‚Ä¶‚Äù line Use: When making a Certificate Request in an emailPKCS#7 One or more certificate packaged together but not signed or encrypted Use: When the CA wants to deliver multiple certificates to a destinationCert Validity Scopes Single Domain Certs -&gt; for single domain Wildcard SSL Certs -&gt; valid for any subdomain Multi-Domain SSL Cert -&gt; valid for multiple domainCert Validation Levels Domain Validation -&gt; dns record or https challange (lets encrypt) Organization Validation -&gt; CA will contact the organization and will check every detail of the company that will be included in the cert Extended Validation -&gt; CA will make full background check of the organizationSSL / SSLTLS, short for Transport Layer Security, and SSL, short for Secure Socket Layers, are both cryptographic protocols that encrypt data and authenticate a connection when moving data on the Internet. Well, TLS is actually just a more recent version of SSL SSL 1.0 ‚Äì never publicly released due to security issues. SSL 2.0 ‚Äì released in 1995. Deprecated in 2011. Has known security issues. SSL 3.0 ‚Äì released in 1996. Deprecated in 2015. Has known security issues. TLS 1.0 ‚Äì released in 1999 as an upgrade to SSL 3.0. Planned deprecation in 2020. TLS 1.1 ‚Äì released in 2006. Planned deprecation in 2020. TLS 1.2 ‚Äì released in 2008. TLS 1.3 ‚Äì released in 2018. Why do we calling the certs SSL cert?The reason why most people still refer to them as SSL certificates is basically a branding issue. Most major certificate providers still refer to certificates as SSL certificates, which is why the naming convention persists.In reality, all the ‚ÄúSSL Certificates‚Äù that you see advertised are really SSL/TLS Certificates What is HTTPS?!This is also where HTTPS comes in (HTTPS stands for ‚ÄúHTTP over SSL/TLS‚Äù)." } ]
